// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Poke.Server.Data.Player;

#nullable disable

namespace Poke.Server.Data.Player.Migrations
{
    [DbContext(typeof(PlayerContext))]
    [Migration("20250523170731_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("player")
                .HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Behavior", b =>
                {
                    b.Property<int>("BehaviorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BehaviorName")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BehaviorType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SkillID")
                        .HasColumnType("INTEGER");

                    b.HasKey("BehaviorID");

                    b.HasIndex("SkillID");

                    b.ToTable("player_behaviors", "player");

                    b.HasDiscriminator().HasValue("Behavior");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Cost", b =>
                {
                    b.Property<int>("CostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BehaviorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CostType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CostID");

                    b.HasIndex("BehaviorID");

                    b.ToTable("player_costs", "player");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Properties.FlagProperty", b =>
                {
                    b.Property<int>("FlagPropertyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTrue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PropertyName")
                        .HasColumnType("INTEGER");

                    b.HasKey("FlagPropertyID");

                    b.ToTable("player_flag_properties", "player");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Properties.FlatProperty", b =>
                {
                    b.Property<int>("FlatPropertyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseValue")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BehaviorID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CostID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PropertyName")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SkillID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SkillID1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UnitID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UnitID1")
                        .HasColumnType("INTEGER");

                    b.HasKey("FlatPropertyID");

                    b.HasIndex("BehaviorID");

                    b.HasIndex("CostID")
                        .IsUnique();

                    b.HasIndex("SkillID");

                    b.HasIndex("SkillID1");

                    b.HasIndex("UnitID");

                    b.HasIndex("UnitID1");

                    b.ToTable("player_flat_properties", "player");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Properties.MinMaxProperty", b =>
                {
                    b.Property<int>("MinMaxPropertyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BehaviorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxBaseValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxCurrentValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinBaseValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinCurrentValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PropertyName")
                        .HasColumnType("INTEGER");

                    b.HasKey("MinMaxPropertyID");

                    b.HasIndex("BehaviorID")
                        .IsUnique();

                    b.ToTable("player_minmax_properties", "player");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Skill", b =>
                {
                    b.Property<int>("SkillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UnitID")
                        .HasColumnType("INTEGER");

                    b.HasKey("SkillID");

                    b.HasIndex("UnitID");

                    b.ToTable("player_skills", "player");

                    b.HasDiscriminator().HasValue("Skill");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Target", b =>
                {
                    b.Property<int>("TargetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BehaviorID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TargetDirection")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TargetID");

                    b.HasIndex("BehaviorID")
                        .IsUnique();

                    b.ToTable("player_targets", "player");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Team", b =>
                {
                    b.Property<int>("TeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TeamID");

                    b.HasIndex("UserID");

                    b.ToTable("player_teams", "player");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Unit", b =>
                {
                    b.Property<int>("UnitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UnitID");

                    b.HasIndex("TeamID");

                    b.ToTable("player_units", "player");

                    b.HasDiscriminator().HasValue("Unit");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.User", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("UserID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("player_users", "player");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Behaviors.CommonBehavior", b =>
                {
                    b.HasBaseType("Poke.Server.Data.Player.Models.Behavior");

                    b.HasDiscriminator().HasValue("CommonBehavior");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Skills.Cleave", b =>
                {
                    b.HasBaseType("Poke.Server.Data.Player.Models.Skill");

                    b.HasDiscriminator().HasValue("Cleave");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Skills.DivineLight", b =>
                {
                    b.HasBaseType("Poke.Server.Data.Player.Models.Skill");

                    b.HasDiscriminator().HasValue("DivineLight");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Skills.Fireball", b =>
                {
                    b.HasBaseType("Poke.Server.Data.Player.Models.Skill");

                    b.HasDiscriminator().HasValue("Fireball");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Skills.Frostbolt", b =>
                {
                    b.HasBaseType("Poke.Server.Data.Player.Models.Skill");

                    b.HasDiscriminator().HasValue("Frostbolt");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Skills.GlacialPuncture", b =>
                {
                    b.HasBaseType("Poke.Server.Data.Player.Models.Skill");

                    b.HasDiscriminator().HasValue("GlacialPuncture");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Skills.Hellfire", b =>
                {
                    b.HasBaseType("Poke.Server.Data.Player.Models.Skill");

                    b.HasDiscriminator().HasValue("Hellfire");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Skills.Lacerate", b =>
                {
                    b.HasBaseType("Poke.Server.Data.Player.Models.Skill");

                    b.HasDiscriminator().HasValue("Lacerate");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Skills.Nullstep", b =>
                {
                    b.HasBaseType("Poke.Server.Data.Player.Models.Skill");

                    b.HasDiscriminator().HasValue("Nullstep");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Skills.Shadowbolt", b =>
                {
                    b.HasBaseType("Poke.Server.Data.Player.Models.Skill");

                    b.HasDiscriminator().HasValue("Shadowbolt");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Skills.Slice", b =>
                {
                    b.HasBaseType("Poke.Server.Data.Player.Models.Skill");

                    b.HasDiscriminator().HasValue("Slice");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Skills.Smite", b =>
                {
                    b.HasBaseType("Poke.Server.Data.Player.Models.Skill");

                    b.HasDiscriminator().HasValue("Smite");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Skills.SmokeMirage", b =>
                {
                    b.HasBaseType("Poke.Server.Data.Player.Models.Skill");

                    b.HasDiscriminator().HasValue("SmokeMirage");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Units.Lancer", b =>
                {
                    b.HasBaseType("Poke.Server.Data.Player.Models.Unit");

                    b.HasDiscriminator().HasValue("Lancer");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Units.Mage", b =>
                {
                    b.HasBaseType("Poke.Server.Data.Player.Models.Unit");

                    b.HasDiscriminator().HasValue("Mage");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Units.Paladin", b =>
                {
                    b.HasBaseType("Poke.Server.Data.Player.Models.Unit");

                    b.HasDiscriminator().HasValue("Paladin");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Units.Rogue", b =>
                {
                    b.HasBaseType("Poke.Server.Data.Player.Models.Unit");

                    b.HasDiscriminator().HasValue("Rogue");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Units.Warlock", b =>
                {
                    b.HasBaseType("Poke.Server.Data.Player.Models.Unit");

                    b.HasDiscriminator().HasValue("Warlock");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Units.Warrior", b =>
                {
                    b.HasBaseType("Poke.Server.Data.Player.Models.Unit");

                    b.HasDiscriminator().HasValue("Warrior");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Behavior", b =>
                {
                    b.HasOne("Poke.Server.Data.Player.Models.Skill", "Skill")
                        .WithMany("Behaviors")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Cost", b =>
                {
                    b.HasOne("Poke.Server.Data.Player.Models.Behavior", "Behavior")
                        .WithMany("Costs")
                        .HasForeignKey("BehaviorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Behavior");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Properties.FlatProperty", b =>
                {
                    b.HasOne("Poke.Server.Data.Player.Models.Behavior", "Behavior")
                        .WithMany("Properties")
                        .HasForeignKey("BehaviorID");

                    b.HasOne("Poke.Server.Data.Player.Models.Cost", "Cost")
                        .WithOne("FlatProperty")
                        .HasForeignKey("Poke.Server.Data.Player.Models.Properties.FlatProperty", "CostID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Poke.Server.Data.Player.Models.Skill", null)
                        .WithMany("Properties")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Poke.Server.Data.Player.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillID1");

                    b.HasOne("Poke.Server.Data.Player.Models.Unit", null)
                        .WithMany("Properties")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Poke.Server.Data.Player.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID1");

                    b.Navigation("Behavior");

                    b.Navigation("Cost");

                    b.Navigation("Skill");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Properties.MinMaxProperty", b =>
                {
                    b.HasOne("Poke.Server.Data.Player.Models.Behavior", "Behavior")
                        .WithOne("MinMaxProperty")
                        .HasForeignKey("Poke.Server.Data.Player.Models.Properties.MinMaxProperty", "BehaviorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Behavior");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Skill", b =>
                {
                    b.HasOne("Poke.Server.Data.Player.Models.Unit", "Unit")
                        .WithMany("Skills")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Target", b =>
                {
                    b.HasOne("Poke.Server.Data.Player.Models.Behavior", "Behavior")
                        .WithOne("Target")
                        .HasForeignKey("Poke.Server.Data.Player.Models.Target", "BehaviorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Behavior");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Team", b =>
                {
                    b.HasOne("Poke.Server.Data.Player.Models.User", "User")
                        .WithMany("Teams")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Unit", b =>
                {
                    b.HasOne("Poke.Server.Data.Player.Models.Team", "Team")
                        .WithMany("Units")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Behavior", b =>
                {
                    b.Navigation("Costs");

                    b.Navigation("MinMaxProperty")
                        .IsRequired();

                    b.Navigation("Properties");

                    b.Navigation("Target")
                        .IsRequired();
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Cost", b =>
                {
                    b.Navigation("FlatProperty")
                        .IsRequired();
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Skill", b =>
                {
                    b.Navigation("Behaviors");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Team", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.Unit", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Poke.Server.Data.Player.Models.User", b =>
                {
                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
